---
# tasks file for aws-greengrass-iot

- name: Set variables
  set_fact:
    greengrass_user: ggc_user
    greengrass_group: ggc_group

- name: Add group ggc_group
  group: 
    name: "{{ greengrass_group }}"
    state: present

- name: Add group to pi user
  user:
    name: pi
    groups: "{{ greengrass_group }}"
    append: yes

- name: Add user gcc_user
  user: 
    name: "{{ greengrass_user }}"
    group: "{{ greengrass_group }}"
    comment: "User for greengrass IoT"
    state: present

- name: Add hardlink protection
  lineinfile:
    path: /etc/sysctl.d/98-rpi.conf
    regexp: '^fs.protected_hardlinks'
    line: 'fs.protected_hardlinks = 1'
  register: hardlink_changed

- name: Add symlink protection
  lineinfile:
    path: /etc/sysctl.d/98-rpi.conf
    regexp: '^fs.protected_symlinks'
    line: 'fs.protected_symlinks = 1'
  register: symlink_changed

- name: Reload sysctl
  sysctl:
    reload: yes
  when: hardlink_changed.changed or symlink_changed.changed

- name: Backup cmdline.txt
  copy:
    src: /boot/cmdline.txt
    dest: /boot/cmdline.bak
    remote_src: yes

- name: Enable cgroup for GreenGrass control resources
  lineinfile: 
    path: /boot/cmdline.txt
    state: present
    regexp: '^(console.*ignore-serial-consoles)$'
    line: '\1 cgroup_enable=memory cgroup_memory=1'
    backrefs: yes

- name: Create symlink java8
  file:
    src: /usr/bin/java
    dest: /usr/bin/{{ java_bin_version }}
    state: link

- name: Create symlink nodejs
  file:
    src: /usr/bin/nodejs
    dest: /usr/bin/{{ nodejs_bin_version }}
    state: link

- name: Create dependency checker directory
  file:
    path: "/home/pi/Downloads/{{ greengrass_dependency_checker_version }}"
    state: directory
    owner: "{{ greengrass_user }}"
    group: "{{ greengrass_group }}"
    mode: 0755

- name: Download dependency checker
  get_url:
    url: https://github.com/aws-samples/aws-greengrass-samples/raw/master/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}.zip
    dest: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}.zip
    owner: "{{ greengrass_user }}"
    group: "{{ greengrass_group }}"
    mode: 0755

- name: Unzip dependency checker
  unarchive:
    src: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}.zip
    dest: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/
    owner: "{{ greengrass_user }}"
    group: "{{ greengrass_group }}"
    remote_src: yes

- name: Execute modprobe configs
  shell: 
    cmd: modprobe configs
    chdir: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}

- name: Execute check_ggc_dependenciies
  shell: 
    cmd: ./check_ggc_dependencies > result.txt
    chdir: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}
  register: check_ggc_dependencies_output

- name: Trigger error if a dependency is  missing
  fail:
    msg: "A dependency is missing, check /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}/result.txt for more infos."
  when: "'Not found'in check_ggc_dependencies_output.stdout or 'Disabled' in check_ggc_dependencies_output.stdout"
...