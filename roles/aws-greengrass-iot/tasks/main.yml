---
# tasks file for aws-greengrass-iot

- name: Set variables
  set_fact:
    greengrass_user: ggc_user
    greengrass_group: ggc_group
    dlr_setup_path: /home/pi/Downloads/dlr
    greengrass_config_archive: /home/pi/Downloads/greengrass-setup.tar.gz

- name: Add group ggc_group
  group: 
    name: "{{ greengrass_group }}"
    state: present

- name: Add group to pi user
  user:
    name: pi
    groups: "{{ greengrass_group }}"
    append: yes

- name: Add user gcc_user
  user: 
    name: "{{ greengrass_user }}"
    group: "{{ greengrass_group }}"
    comment: "User for greengrass IoT"
    state: present

- name: Add hardlink protection
  lineinfile:
    path: /etc/sysctl.d/98-rpi.conf
    regexp: '^fs.protected_hardlinks'
    line: 'fs.protected_hardlinks = 1'
  register: hardlink_changed

- name: Add symlink protection
  lineinfile:
    path: /etc/sysctl.d/98-rpi.conf
    regexp: '^fs.protected_symlinks'
    line: 'fs.protected_symlinks = 1'
  register: symlink_changed

- name: Reload sysctl
  sysctl:
    reload: yes
  when: hardlink_changed.changed or symlink_changed.changed

- name: Check if /boot/cmdline.txt contains cgroup enable config
  command: awk /^.*cgroup_memory=1$/ /boot/cmdline.txt
  register: check_cmdline_conf

- name: Backup cmdline.txt
  copy:
    src: /boot/cmdline.txt
    dest: /boot/cmdline.bak
    remote_src: yes
  when: not check_cmdline_conf.stdout

- name: Enable cgroup for GreenGrass control resources
  lineinfile: 
    path: /boot/cmdline.txt
    state: present
    regexp: '^(console.*ignore-serial-consoles)$'
    line: '\1 cgroup_enable=memory cgroup_memory=1'
    backrefs: yes
  when: not check_cmdline_conf.stdout

- name: Create DLR setup directory
  file:
    path: "{{ dlr_setup_path }}"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: 0755

- name: Download dlr pip package
  get_url:
    url: "{{ dlr_url }}"
    dest: "{{ dlr_setup_path }}"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: 0755
  register: script_downloaded

- name: Install DLR for running pytorch models
  pip:
    name: "{{ script_downloaded.dest }}"
    executable: pip3
  when: script_downloaded.changed

- name: Create symlink java8
  file:
    src: /usr/bin/java
    dest: /usr/bin/{{ java_bin_version }}
    state: link

- name: Create symlink nodejs
  file:
    src: /usr/bin/nodejs
    dest: /usr/bin/{{ nodejs_bin_version }}
    state: link

- name: Create greengrass directory
  file:
    path: "/greengrass"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: 0755

- name: Check if config greengrass exists
  stat:
    path: /greengrass/config/config.json
  register: check_config_json

- name: Check if greengrass setup present in Download folder
  stat:
    path: "{{ greengrass_config_archive }}"
  register: check_greengrass_config_archive
  when: not check_config_json.stat.exists

- name: Fail if config archive does not exist
  fail:
    msg: "The greengrass config archive does not exist: {{ greengrass_config_archive }}"
  when: (not check_config_json.stat.exists) and (not check_greengrass_config_archive.stat.exists)

- name: Extract config if necessary
  unarchive:
    src: "{{ greengrass_config_archive }}"
    dest: /greengrass
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    remote_src: yes
  when: not check_config_json.stat.exists

- name: Check if Amazon root CA pem is in config
  stat:
    path: "/greengrass/certs/root.ca.pem"
  register: check_amazon_root_perm

- name: Download the root CA pem amazon if needed
  get_url:
    url: https://www.amazontrust.com/repository/AmazonRootCA1.pem
    dest: /greengrass/certs/root.ca.pem
  when: not check_amazon_root_perm.stat.exists

- name: Create dependency checker directory
  file:
    path: "/home/pi/Downloads/{{ greengrass_dependency_checker_version }}"
    state: directory
    owner: "{{ greengrass_user }}"
    group: "{{ greengrass_group }}"
    mode: 0755

- name: Download dependency checker
  get_url:
    url: https://github.com/aws-samples/aws-greengrass-samples/raw/master/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}.zip
    dest: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}.zip
    owner: "{{ greengrass_user }}"
    group: "{{ greengrass_group }}"
    mode: 0755

- name: Unzip dependency checker
  unarchive:
    src: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}.zip
    dest: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/
    owner: "{{ greengrass_user }}"
    group: "{{ greengrass_group }}"
    remote_src: yes

- name: Execute modprobe configs
  shell: 
    cmd: modprobe configs
    chdir: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}

- name: Execute check_ggc_dependenciies
  shell: 
    cmd: ./check_ggc_dependencies > result.txt
    chdir: /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}
  register: check_ggc_dependencies_output

- name: Trigger error if a dependency is  missing
  fail:
    msg: "A dependency is missing, check /home/pi/Downloads/{{ greengrass_dependency_checker_version }}/greengrass-dependency-checker-{{ greengrass_dependency_checker_version }}/result.txt for more infos."
  when: "'Not found'in check_ggc_dependencies_output.stdout or 'Disabled' in check_ggc_dependencies_output.stdout"

- name: Install greengrass keyring
  apt:
    deb: https://d1onfpft10uf5o.cloudfront.net/greengrass-apt/downloads/aws-iot-greengrass-keyring.deb

- name: Add greengrass apt list
  copy:
    src: greengrass.list
    dest: /etc/apt/sources.list.d/greengrass.list

- name: Install greengrass package
  apt:
    name: aws-iot-greengrass-core
    update_cache: yes 
    state: latest

- name: Enable greengrass service
  systemd:
    name: greengrass
    enabled: yes
    state: started
...